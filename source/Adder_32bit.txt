module Add_32bit(c_outc, s, bit1, bit2, c_inc);
output c_outc;
output [32:1] s;
input [32:1] bit1, bit2;
input c_inc;
Add_full AH1(.sum(s[1]), .c_out(c1), .c_in(c_inc), .a(bit1[1]), .b(bit2[1]));
Add_full AH2(.sum(s[2]), .c_out(c2), .c_in(c1), .a(bit1[2]), .b(bit2[2]));
Add_full AH3(.sum(s[3]), .c_out(c3), .c_in(c2), .a(bit1[3]), .b(bit2[3]));
Add_full AH4(.sum(s[4]), .c_out(c4), .c_in(c3), .a(bit1[4]), .b(bit2[4]));
Add_full AH5(.sum(s[5]), .c_out(c5), .c_in(c4), .a(bit1[5]), .b(bit2[5]));
Add_full AH6(.sum(s[6]), .c_out(c6), .c_in(c5), .a(bit1[6]), .b(bit2[6]));
Add_full AH7(.sum(s[7]), .c_out(c7), .c_in(c6), .a(bit1[7]), .b(bit2[7]));
Add_full AH8(.sum(s[8]), .c_out(c8), .c_in(c7), .a(bit1[8]), .b(bit2[8]));
Add_full AH9(.sum(s[9]), .c_out(c9), .c_in(c8), .a(bit1[9]), .b(bit2[9]));
Add_full AH10(.sum(s[10]), .c_out(c10), .c_in(c9), .a(bit1[10]), .b(bit2[10]));
Add_full AH11(.sum(s[11]), .c_out(c11), .c_in(c10), .a(bit1[11]), .b(bit2[11]));
Add_full AH12(.sum(s[12]), .c_out(c12), .c_in(c11), .a(bit1[12]), .b(bit2[12]));
Add_full AH13(.sum(s[13]), .c_out(c13), .c_in(c12), .a(bit1[13]), .b(bit2[13]));
Add_full AH14(.sum(s[14]), .c_out(c14), .c_in(c13), .a(bit1[14]), .b(bit2[14]));
Add_full AH15(.sum(s[15]), .c_out(c15), .c_in(c14), .a(bit1[15]), .b(bit2[15]));
Add_full AH16(.sum(s[16]), .c_out(c16), .c_in(c15), .a(bit1[16]), .b(bit2[16]));
Add_full AH17(.sum(s[17]), .c_out(c17), .c_in(c16), .a(bit1[17]), .b(bit2[17]));
Add_full AH18(.sum(s[18]), .c_out(c18), .c_in(c17), .a(bit1[18]), .b(bit2[18]));
Add_full AH19(.sum(s[19]), .c_out(c19), .c_in(c18), .a(bit1[19]), .b(bit2[19]));
Add_full AH20(.sum(s[20]), .c_out(c20), .c_in(c19), .a(bit1[20]), .b(bit2[20]));
Add_full AH21(.sum(s[21]), .c_out(c21), .c_in(c20), .a(bit1[21]), .b(bit2[21]));
Add_full AH22(.sum(s[22]), .c_out(c22), .c_in(c21), .a(bit1[22]), .b(bit2[22]));
Add_full AH23(.sum(s[23]), .c_out(c23), .c_in(c22), .a(bit1[23]), .b(bit2[23]));
Add_full AH24(.sum(s[24]), .c_out(c24), .c_in(c23), .a(bit1[24]), .b(bit2[24]));
Add_full AH25(.sum(s[25]), .c_out(c25), .c_in(c24), .a(bit1[25]), .b(bit2[25]));
Add_full AH26(.sum(s[26]), .c_out(c26), .c_in(c25), .a(bit1[26]), .b(bit2[26]));
Add_full AH27(.sum(s[27]), .c_out(c27), .c_in(c26), .a(bit1[27]), .b(bit2[27]));
Add_full AH28(.sum(s[28]), .c_out(c28), .c_in(c27), .a(bit1[28]), .b(bit2[28]));
Add_full AH29(.sum(s[29]), .c_out(c29), .c_in(c28), .a(bit1[29]), .b(bit2[29]));
Add_full AH30(.sum(s[30]), .c_out(c30), .c_in(c29), .a(bit1[30]), .b(bit2[30]));
Add_full AH31(.sum(s[31]), .c_out(c31), .c_in(c30), .a(bit1[31]), .b(bit2[31]));
Add_full AH32(.sum(s[32]), .c_out(c_outc), .c_in(c31), .a(bit1[32]), .b(bit2[32]));
endmodule
module Add_full(c_out, sum, a, b, c_in);
output sum, c_out;
input a, b, c_in;
wire w1, w2, w3;
Add_half AH1(.suma(w1), .c_outa(w2), .a(a), .b(b));
Add_half AH2(.suma(sum), .c_outa(w3), .a(c_in), .b(w1));
or carry_bit(c_out, w2, w3);
endmodule
module Add_half(c_outa, suma, a, b);
output suma, c_outa;
input a, b;
xor sum_bit(suma, a, b);
and carry_bit(c_outa, a, b);
endmodule
